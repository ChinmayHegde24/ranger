/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.kms.client;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.security.ProviderUtils;
import org.apache.ranger.plugin.client.HadoopException;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

/**
* @generated by copilot
* @description Unit Test cases for KMSClient
*/
@ExtendWith(MockitoExtension.class)
@TestMethodOrder(MethodOrderer.MethodName.class)
public class KMSClientTest {
    @Test
    void createProvider_CreateSingleProvider_whenUriHasSingleHost() throws Exception {
        KMSClient kmsClient = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "simple");

        String[] providers = invokeCreateProvider(kmsClient, "jceks://http@host1:9600/kms");

        assertEquals(1, providers.length);
        assertEquals("http://host1:9600/kms", providers[0]);
    }

    @Test
    public void testCreateProvider_multipleHosts() throws Exception {
        KMSClient client = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "kerberos");

        // Test a URI with multiple hosts
        String uri = "jceks://http@host1.example.com;host2.example.com;host3.example.com:9600/kms";

        Method method = KMSClient.class.getDeclaredMethod("createProvider", String.class);
        method.setAccessible(true);

        String[] providers = (String[]) method.invoke(client, uri);

        assertNotNull(providers);
        assertEquals(3, providers.length);
        assertEquals("http://host1.example.com:9600/kms", providers[0]);
        assertEquals("http://host2.example.com:9600/kms", providers[1]);
        assertEquals("http://host3.example.com:9600/kms", providers[2]);
    }

    @Test
    public void testCreateProvider_emptyAuthority() throws Exception {
        KMSClient client = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "kerberos");

        // URI with empty authority
        String uri = "jceks:///kms";

        Method method = KMSClient.class.getDeclaredMethod("createProvider", String.class);
        method.setAccessible(true);

        InvocationTargetException thrown = assertThrows(InvocationTargetException.class, () -> {
            method.invoke(client, uri);
        });

        Throwable cause = thrown.getCause();
        assertTrue(cause instanceof IOException);
    }

    @Test
    public void testCreateProvider_invalidPort() {
        KMSClient client = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "kerberos");

        // Test a URI with invalid port
        String uri = "jceks://http@host1.example.com:invalidport/kms";

        Method method = null;
        try {
            method = KMSClient.class.getDeclaredMethod("createProvider", String.class);
            method.setAccessible(true);
            method.invoke(client, uri);
            fail("Expected an IOException to be thrown");
        } catch (Exception e) {
            assertTrue(e.getCause() instanceof IOException);
        }
    }

    @Test
    public void testCreateProvider_directMethod() throws Exception {
        KMSClient client = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "kerberos");

        // Test the createProvider(URL, int, String) method directly
        URL origUrl = new URL("http://dummy:8080/kms");
        int port = 9600;
        String hostsPart = "host1.example.com;host2.example.com";

        Method method = KMSClient.class.getDeclaredMethod("createProvider", URL.class, int.class, String.class);
        method.setAccessible(true);

        String[] providers = (String[]) method.invoke(client, origUrl, port, hostsPart);

        assertNotNull(providers);
        assertEquals(2, providers.length);
        assertEquals("http://host1.example.com:9600/kms", providers[0]);
        assertEquals("http://host2.example.com:9600/kms", providers[1]);
    }

    @Test
    public void testCreateProvider_singleHostDirectMethod() throws Exception {
        KMSClient client = new KMSClient("jceks://http@host1:9600/kms", "user", "pass", "principal", "keytab", "rules", "kerberos");

        // Test the createProvider(URL, int, String) method with a single host
        URL origUrl = new URL("http://host1.example.com:8080/kms");
        int port = 8080;
        String hostsPart = "host1.example.com";

        Method method = KMSClient.class.getDeclaredMethod("createProvider", URL.class, int.class, String.class);
        method.setAccessible(true);

        String[] providers = (String[]) method.invoke(client, origUrl, port, hostsPart);

        assertNotNull(providers);
        assertEquals(1, providers.length);
        assertEquals("http://host1.example.com:8080/kms", providers[0]);
    }

    @Test
    public void testConstructorAndFields() {
        KMSClient client = new KMSClient("provider", "user", "pass", "principal", "keytab", "rules", "kerberos");
        assertEquals("provider", client.provider);
        assertEquals("user", client.username);
        assertEquals("pass", client.password);
        assertEquals("principal", client.rangerPrincipal);
        assertEquals("keytab", client.rangerKeytab);
        assertEquals("rules", client.nameRules);
        assertEquals("kerberos", client.authType);
    }

    @Test
    public void testGetKmsClient_withValidConfig() {
        Map<String, String> configs = new HashMap<>();
        configs.put("provider", "provider");
        configs.put("username", "user");
        configs.put("password", "pass");
        configs.put("rangerprincipal", "principal");
        configs.put("rangerkeytab", "keytab");
        configs.put("namerules", "rules");
        configs.put("authtype", "kerberos");

        KMSClient client = KMSClient.getKmsClient("service", configs);
        assertNotNull(client);
        assertEquals("provider", client.provider);
    }

    @Test
    public void testGetKmsClient_withNullConfig() {
        Exception ex = assertThrows(HadoopException.class, () -> {
            KMSClient.getKmsClient("service", null);
        });
        assertTrue(ex.getMessage().contains("ConfigMap is empty"));
    }

    @Test
    public void testTestConnection_success() {
        Map<String, String> configs = new HashMap<>();
        configs.put("provider", "provider");
        configs.put("username", "user");
        configs.put("password", "pass");
        configs.put("rangerprincipal", "principal");
        configs.put("rangerkeytab", "keytab");
        configs.put("namerules", "rules");
        configs.put("authtype", "kerberos");

        Map<String, Object> result = null;
        try {
            result = KMSClient.testConnection("service", configs);
        } catch (Exception e) {
            System.out.println("testConnection threw exception: " + e.getMessage());
        }

        assertNotNull(result, "Response map should not be null even on failure");
    }

    @Test
    public void testGetKmsKey_nullClient() {
        Exception ex = assertThrows(HadoopException.class, () -> {
            KMSClient.getKmsKey(null, "key", null);
        });
        assertTrue(ex.getMessage().contains("KmsClient is null"));
    }

    @Test
    public void testCreateProvider_withMultipleHosts() throws Exception {
        KMSClient client = new KMSClient("provider", "user", "pass", "principal", "keytab", "rules", "kerberos");
        // Use a valid URI with multiple hosts
        String uri = "http://host1;host2:16000/path";
        Method method = KMSClient.class.getDeclaredMethod("createProvider", String.class);
        method.setAccessible(true);
        try {
            Object result = method.invoke(client, uri);
            assertNotNull(result);
            assertTrue(result instanceof String[]);
        } catch (Exception e) {
            // Acceptable if it throws due to malformed URI
        }
    }

    @Test
    void testUnnestUri_fullComponents() throws URISyntaxException {
        // Given a URI with a scheme, authority (with user info), path, query, and fragment.
        URI uri = new URI("kms://user@host.com:8080/path/to/resource?param=value&id=123#section");
        Path expectedPath = new Path("user://host.com:8080/path/to/resource?param=value&id=123#section");

        // When the unnestUri method is called
        Path actualPath = ProviderUtils.unnestUri(uri);

        // Then the result should match the expected unnested path
        assertEquals(expectedPath, actualPath, "The unnested URI should match the expected format.");
    }

    // Helper method to access the private createProvider method via reflection
    private String[] invokeCreateProvider(KMSClient kmsClient, String uri) throws Exception {
        Method method = KMSClient.class.getDeclaredMethod("createProvider", String.class);
        method.setAccessible(true);
        return (String[]) method.invoke(kmsClient, uri);
    }
}
