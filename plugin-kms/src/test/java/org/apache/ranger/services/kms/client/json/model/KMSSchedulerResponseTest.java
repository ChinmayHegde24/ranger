/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.kms.client.json.model;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

class KMSSchedulerResponseTest {
    @Test
    void testGetQueueNamesWhenSchedulerIsNull() {
        KMSSchedulerResponse response = new KMSSchedulerResponse();
        List<String> queueNames = response.getQueueNames();
        assertNotNull(queueNames);
        assertTrue(queueNames.isEmpty());
    }

    /**
    * @generated by copilot
    */
    @Test
    void testGetQueueNames_WithNestedQueues() {
        // Build nested structure: root -> child1, child2 -> grandchild
        KMSSchedulerResponse.KMSSchedulerInfo grandchild = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(grandchild, "queueName", "grandchild");
        setField(grandchild, "queues", null);

        KMSSchedulerResponse.KMSSchedulerInfo child1 = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(child1, "queueName", "child1");
        setField(child1, "queues", null);

        KMSSchedulerResponse.KMSSchedulerInfo child2 = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(child2, "queueName", "child2");
        KMSSchedulerResponse.KMSQueues child2Queues = new KMSSchedulerResponse.KMSQueues();
        setField(child2Queues, "queue", Collections.singletonList(grandchild));
        setField(child2, "queues", child2Queues);

        KMSSchedulerResponse.KMSQueues rootQueues = new KMSSchedulerResponse.KMSQueues();
        setField(rootQueues, "queue", Arrays.asList(child1, child2));

        KMSSchedulerResponse.KMSSchedulerInfo rootInfo = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(rootInfo, "queueName", "root");
        setField(rootInfo, "queues", rootQueues);

        KMSSchedulerResponse.KMSScheduler scheduler = new KMSSchedulerResponse.KMSScheduler();
        setField(scheduler, "schedulerInfo", rootInfo);

        KMSSchedulerResponse response = new KMSSchedulerResponse();
        setField(response, "scheduler", scheduler);

        List<String> queueNames = response.getQueueNames();
        assertEquals(Arrays.asList("root", "root.child1", "root.child2", "root.child2.grandchild"), queueNames);
    }

    @Test
    void testSchedulerInfo_CollectQueueNames_NoChildren() {
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(info, "queueName", "queueA");
        setField(info, "queues", null);
        List<String> names = new ArrayList<>();
        info.collectQueueNames(names, null);
        assertEquals(Collections.singletonList("queueA"), names);
    }

    @Test
    void testKMS_QueuesCollectQueueNames() {
        KMSSchedulerResponse.KMSSchedulerInfo child = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(child, "queueName", "child");
        setField(child, "queues", null);
        KMSSchedulerResponse.KMSQueues queues = new KMSSchedulerResponse.KMSQueues();
        setField(queues, "queue", Collections.singletonList(child));
        List<String> names = new ArrayList<>();
        queues.collectQueueNames(names, "parent");
        assertEquals(Collections.singletonList("parent.child"), names);
    }

    @Test
    void testGetScheduler() {
        KMSSchedulerResponse.KMSScheduler scheduler = new KMSSchedulerResponse.KMSScheduler();
        KMSSchedulerResponse response = new KMSSchedulerResponse();
        setField(response, "scheduler", scheduler);
        assertSame(scheduler, response.getScheduler());
    }

    @Test
    void testGetSchedulerInfo_ReturnsNullByDefault() {
        KMSSchedulerResponse.KMSScheduler scheduler = new KMSSchedulerResponse.KMSScheduler();
        assertNull(scheduler.getSchedulerInfo());
    }

    @Test
    void testGetSchedulerInfo() {
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        KMSSchedulerResponse.KMSScheduler scheduler = new KMSSchedulerResponse.KMSScheduler();
        setField(scheduler, "schedulerInfo", info);
        assertSame(info, scheduler.getSchedulerInfo());
    }

    @Test
    void testGetQueueName() {
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(info, "queueName", "testQueue");
        assertEquals("testQueue", info.getQueueName());
    }

    @Test
    void testGetQueues() {
        KMSSchedulerResponse.KMSQueues queues = new KMSSchedulerResponse.KMSQueues();
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(info, "queues", queues);
        assertSame(queues, info.getQueues());
    }

    @Test
    void testGetQueue() {
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        List<KMSSchedulerResponse.KMSSchedulerInfo> queueList = Collections.singletonList(info);
        KMSSchedulerResponse.KMSQueues queues = new KMSSchedulerResponse.KMSQueues();
        setField(queues, "queue", queueList);
        assertSame(queueList, queues.getQueue());
    }

    @Test
    void testScheduler_CollectQueueNames_WithNullSchedulerInfo() {
        KMSSchedulerResponse.KMSScheduler scheduler = new KMSSchedulerResponse.KMSScheduler();
        setField(scheduler, "schedulerInfo", null);
        List<String> names = new ArrayList<>();
        scheduler.collectQueueNames(names);
        assertTrue(names.isEmpty());
    }

    @Test
    void testSchedulerInfo_CollectQueueNames_WithNullQueueName() {
        KMSSchedulerResponse.KMSSchedulerInfo info = new KMSSchedulerResponse.KMSSchedulerInfo();
        setField(info, "queueName", null);
        setField(info, "queues", null);
        List<String> names = new ArrayList<>();
        info.collectQueueNames(names, null);
        assertTrue(names.isEmpty());
    }

    @Test
    void testKMS_QueuesCollectQueueNames_WithNullQueue() {
        KMSSchedulerResponse.KMSQueues queues = new KMSSchedulerResponse.KMSQueues();
        setField(queues, "queue", null);
        List<String> names = new ArrayList<>();
        queues.collectQueueNames(names, "parent");
        assertTrue(names.isEmpty());
    }

    @Test
    void testKMS_QueuesCollectQueueNames_WithEmptyQueue() {
        KMSSchedulerResponse.KMSQueues queues = new KMSSchedulerResponse.KMSQueues();
        setField(queues, "queue", Collections.emptyList());
        List<String> names = new ArrayList<>();
        queues.collectQueueNames(names, "parent");
        assertTrue(names.isEmpty());
    }

    private static void setField(Object target, String fieldName, Object value) {
        try {
            java.lang.reflect.Field field = target.getClass().getDeclaredField(fieldName);
            field.setAccessible(true);
            field.set(target, value);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
