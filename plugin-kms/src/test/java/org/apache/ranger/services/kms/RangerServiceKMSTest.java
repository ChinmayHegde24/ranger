/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ranger.services.kms;

import org.apache.ranger.plugin.model.RangerPolicy;
import org.apache.ranger.plugin.model.RangerService;
import org.apache.ranger.plugin.model.RangerServiceDef;
import org.apache.ranger.plugin.model.RangerServiceDef.RangerAccessTypeDef;
import org.apache.ranger.plugin.service.ResourceLookupContext;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

/**
* @generated by copilot
* @description Unit Test cases for RangerServiceKMS
*/
@ExtendWith(MockitoExtension.class)
class RangerServiceKMSTest {
    static class TestableRangerServiceKMS extends RangerServiceKMS {
        public void setServiceDef(RangerServiceDef def) {
            this.serviceDef = def; }

        public void setLookUpUser(String user) {
            this.lookUpUser = user; }

        @Override
        public String getLookupUser(String authType, String adminPrincipal, String adminKeytab) {
            return this.lookUpUser;
        }
    }

    @Spy
    TestableRangerServiceKMS spyKMS;

    @Mock
    ResourceLookupContext mockContext;
    @Mock
    RangerServiceDef mockServiceDef;
    @Mock
    RangerService mockService;

    @BeforeEach
    void setUp() {
        spyKMS = Mockito.spy(new TestableRangerServiceKMS());
    }

    @Test
    void testValidateConfig_success() throws Exception {
        Map<String, String> configs = new HashMap<>();
        spyKMS.setConfigs(configs);
        doReturn("serviceName").when(spyKMS).getServiceName();
        try {
            Map<String, Object> result = spyKMS.validateConfig();
            assertNotNull(result);
        } catch (Exception e) {
            assertTrue(e.getMessage() != null);
        }
    }

    @Test
    void testValidateConfig_exception() throws Exception {
        Map<String, String> configs = new HashMap<>();
        spyKMS.setConfigs(configs);
        doReturn("serviceName").when(spyKMS).getServiceName();
        assertThrows(Exception.class, () -> spyKMS.validateConfig());
    }

    @Test
    void testLookupResource_nullContext() {
        List<String> result = spyKMS.lookupResource(null);
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test
    void testInit() {
        RangerServiceDef serviceDef = new RangerServiceDef();
        RangerService service = new RangerService();

        spyKMS.init(serviceDef, service);

        verify(spyKMS, times(1)).init(serviceDef, service);
    }

    @Test
    void testCreateDefaultPolicyItem_emptyAccessTypes() {
        TestableRangerServiceKMS service = new TestableRangerServiceKMS();
        List<RangerAccessTypeDef> accessTypeDefs = new ArrayList<>();
        List<String> users = Arrays.asList("user1");

        try {
            Method method = RangerServiceKMS.class.getDeclaredMethod("createDefaultPolicyItem", List.class, List.class);
            method.setAccessible(true);
            RangerPolicy.RangerPolicyItem policyItem =
                    (RangerPolicy.RangerPolicyItem) method.invoke(service, accessTypeDefs, users);

            assertNotNull(policyItem);
            assertEquals(users, policyItem.getUsers());
            assertTrue(policyItem.getAccesses().isEmpty());
            assertTrue(policyItem.getDelegateAdmin());
        } catch (Exception e) {
            fail("Reflection call failed: " + e.getMessage());
        }
    }

    @Test
    void testLookupResource_exception() {
        ResourceLookupContext context = mock(ResourceLookupContext.class);

        doThrow(new RuntimeException("Test exception")).when(spyKMS).getServiceName();

        // Verify that the exception is propagated
        assertThrows(RuntimeException.class, () -> {
            spyKMS.lookupResource(context);
        });
    }
}
